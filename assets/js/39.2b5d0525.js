(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{317:function(e,t,o){"use strict";o.r(t);var a=o(14),n=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("The purpose of project building is to help users quickly build their own third-party projects, especially "),t("code",[e._v("project Manager")]),e._v(" is related to third-party tool chain. Currently, the only compatible third-party tool is xilinx's vivado (other third-parties will continue to be supported in the future). However, "),t("code",[e._v("lib Manager")]),e._v(" is to avoid repeatedly build a wheel and provide a function to facilitate the user to use some common HDL libraries provided by plugin, but also support the user to accumulate their own library.")]),e._v(" "),t("h2",{attrs:{id:"project-manager"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#project-manager"}},[e._v("#")]),e._v(" Project Manager")]),e._v(" "),t("p",[e._v("Main purposes of the "),t("code",[e._v("project manager")]),e._v(" are as follows:")]),e._v(" "),t("ol",[t("li",[e._v("abstract out the function to reduce the learning cost of other three-party tools")]),e._v(" "),t("li",[e._v("erase version differences, allowing more focus on the source code design\n"),t("ul",[t("li",[e._v("Because as long as you have the configuration file and design source, you can restore the project under any vivado version.")])])])]),e._v(" "),t("p",[t("code",[e._v("[Note]")]),e._v(": "),t("code",[e._v("project Manager")]),e._v(" is strongly dependent on the property configuration file "),t("code",[e._v("property.json")]),e._v(", if missing, it will directly use the default (template) configuration.")]),e._v(" "),t("p",[e._v("For project management on the PL side, I have abstracted the following functions:")]),e._v(" "),t("ol",[t("li",[e._v("launch ------ to start the whole project, or create it if there is no project, or open it directly if there is")]),e._v(" "),t("li",[e._v("refresh ----- to refresh the whole project and update the design of the whole project")]),e._v(" "),t("li",[e._v("simulate ---- to simulate the whole project, without opening the GUI interface by default "),t("em",[e._v("`(using the simulator in TOOL_CHAIN)")]),e._v(" "),t("ol",[t("li",[e._v("simGUI ----- open the GUI interface after successful simulation")]),e._v(" "),t("li",[e._v("simCLI ----- does not open the GUI interface after successful simulation")])])]),e._v(" "),t("li",[e._v("build ------- to build the whole project and finally output the bit stream file\n"),t("ol",[t("li",[e._v("synth ------ to synthesize the project")]),e._v(" "),t("li",[e._v("impl ------- to implement the project")]),e._v(" "),t("li",[e._v("bit -------- to export the project's bitstream file")])])]),e._v(" "),t("li",[e._v("program -----  download the bitstream file to the FPGA/zynq board "),t("em",[t("code",[e._v("(download and burn, but not solidify)")])])]),e._v(" "),t("li",[e._v("gui --------- open the GUI interface of the tool chain\n"),t("ol",[t("li",[e._v("After opening the GUI, the terminal named "),t("em",[t("code",[e._v("HardWare")])]),e._v(" is not recommended to close by itself.\n"),t("ul",[t("li",[e._v("The whole GUI interface will be closed automatically after direct closure, and if not saved then the design may be lost.")]),e._v(" "),t("li",[e._v("The plugin will not move your "),t("code",[e._v("IP and bd design")]),e._v(" to the same level of "),t("code",[e._v("Hardware/src/")]),e._v(" after closing directly.")])])])])]),e._v(" "),t("li",[e._v("exit -------- Closing the project is only valid under the CLI, after opening the GUI, terminal control is taken over by the GUI.\n"),t("ol",[t("li",[e._v("After clicking "),t("code",[e._v("exit")]),e._v(" the plugin will move your "),t("code",[e._v("IP and bd design")]),e._v(" to the same level of "),t("code",[e._v("Hardware/src/")]),e._v(".")]),e._v(" "),t("li",[e._v("If you close the terminal named "),t("em",[t("code",[e._v("HardWare")])]),e._v(" directly, the move of "),t("code",[e._v("IP and bd designs")]),e._v(" will not take place.")]),e._v(" "),t("li",[e._v("Note: You can also move your "),t("code",[e._v("IP and bd designs")]),e._v(" to the same level of "),t("code",[e._v("Hardware/src/")]),e._v(" when "),t("em",[e._v("Clean")]),e._v(" is in the function bar "),t("em",[e._v("TOOL")]),e._v(".")])])])]),e._v(" "),t("p",[e._v("In addition to the above explicit functions, there are two implicit functions each in the "),t("code",[e._v("architecture")]),e._v(" column, which are")]),e._v(" "),t("ol",[t("li",[t("code",[e._v("Set as Top")]),e._v(" -------------- sets this file as the top-level design module of the current project")]),e._v(" "),t("li",[t("code",[e._v("Set as Testbench Top")]),e._v(" ---- sets the file as the top-level module of the simulation for the current project")])]),e._v(" "),t("p",[e._v("Specially, "),t("em",[t("code",[e._v("Zynq")])]),e._v(" devices support mixed PS+PL development. To cope with the mixed development, the plugin gives the "),t("code",[e._v("soc")]),e._v(" configuration as follows:")]),e._v(" "),t("div",{staticClass:"language-json extra-class"},[t("pre",{pre:!0,attrs:{class:"language-json"}},[t("code",[t("span",{pre:!0,attrs:{class:"token property"}},[e._v('"soc"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[e._v('"core"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"ps7_cortexa9_0"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[e._v('"bd"')]),e._v("  "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"zynq_default"')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),t("p",[e._v("Using the configuration plugin as above will automatically build a bd project containing the zynq design to help users quickly build the platform.")]),e._v(" "),t("p",[e._v("Finally, about device selection, it can be configured in the "),t("code",[e._v("property.json")]),e._v(" file under the "),t("em",[e._v("device")]),e._v(" property.\nThe following are currently available:")]),e._v(" "),t("ul",[t("li",[e._v("xc7z020clg400-2")]),e._v(" "),t("li",[e._v("xc7a35tftg256-1")]),e._v(" "),t("li",[e._v("xc7a35tcsg324-1")]),e._v(" "),t("li",[e._v("xc7z035ffg676-2")]),e._v(" "),t("li",[e._v("xc7z020clg484-1")])]),e._v(" "),t("p",[e._v("But the supported devices are not limited to these, theoretically all the devices that vivado can support can be supported. You can write your device directly to the "),t("em",[e._v("Device")]),e._v(" attribute, which will give you a warning if the device is not in the database, but will not prevent you from running. To remove the warning you need to add your device to the database with the "),t("em",[e._v("FPGA:Add devices to the database")]),e._v(" command. Unneeded devices can also be removed from the database with "),t("em",[e._v("FPGA:Remove the device from the database")]),e._v(".")]),e._v(" "),t("p",[t("strong",[e._v("Related setting")]),e._v(" "),t("code",[e._v("prj.vivado.install.path")]),e._v(" --- Installation path of vivado\nWhen vivado is installed, you can configure the installation path of vivado directly inside the plugin, or you can add vivado to the environment variables (recommended). If the path is not found by mistake, it is already added to the environment variables by default.\n"),t("em",[e._v("e.g. : D:/APP/vivado_18_3/Vivado/2018.3/bin/")]),e._v(" "),t("code",[e._v("[Note]")]),e._v(": Use "),t("code",[e._v("/")]),e._v(" to separate the paths and configure them to the bin directory.")]),e._v(" "),t("p",[t("code",[e._v("prj.xilinx.IP.repo.path")]),e._v(" ---- User-designed IP libraries from xilinx\nAfter configuring this property, the plugin will automatically add the path to the IP repo of vivado.\n"),t("em",[e._v("e.g. : D:/project/FPGA/.Lib/xIP")])]),e._v(" "),t("p",[t("code",[e._v("prj.xilinx.BD.repo.path")]),e._v(" ----  User-defined placement path for xilinx block design files\n"),t("em",[e._v("e.g. : D:/project/FPGA/.Lib/xbd")])]),e._v(" "),t("h2",{attrs:{id:"lib-manager"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#lib-manager"}},[e._v("#")]),e._v(" lib Manager")]),e._v(" "),t("p",[e._v("The plugin comes with HDL function library linking function.\nThe "),t("code",[e._v("property.json")]),e._v(" file is configured as follows:")]),e._v(" "),t("div",{staticClass:"language-json extra-class"},[t("pre",{pre:!0,attrs:{class:"language-json"}},[t("code",[t("span",{pre:!0,attrs:{class:"token property"}},[e._v('"library"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[e._v('"state"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('""')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// local | remote(default)")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[e._v('"hardware"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        "),t("span",{pre:!0,attrs:{class:"token property"}},[e._v('"common"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n        "),t("span",{pre:!0,attrs:{class:"token property"}},[e._v('"custom"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token property"}},[e._v('"IP_REPO"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"arm"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// including ip CM3DbgAXI & DAPLink_to_Arty_shield")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"adi"')]),e._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// containing all device ip's under the adi company, with the included absolute paths removed Taken from adi2019_r1")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n")])])]),t("p",[e._v("It is not recommended that users configure the library properties in the "),t("code",[e._v("property.json")]),e._v(" file by themselves. It is recommended to use the "),t("em",[e._v("import library")]),e._v(" command, or the icon activation command in the following figure to do so.")]),e._v(" "),t("p",[e._v("The "),t("em",[e._v("state")]),e._v(" represents whether the library file is loaded into the local workspace, or linked as a remote.")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("remote")]),e._v(" represents virtual inclusion from a remote (anything not under the workspace is considered remote, not remote on the network).\n"),t("ul",[t("li",[e._v("remote library files can be opened and changed "),t("em",[e._v("("),t("code",[e._v("Note:")]),e._v("If the next import after the change is the code after the change)")]),e._v(" .")])])]),e._v(" "),t("li",[t("code",[e._v("local")]),e._v(" means import the remote file into the project locally\n"),t("ol",[t("li",[e._v("placed in the lib under "),t("code",[e._v("arch.hardware.src")]),e._v(", the changes will not affect the code in the remote library.")]),e._v(" "),t("li",[t("em",[t("code",[e._v("[Note]")]),e._v(": When changing from local back to remote the lib folder will be deleted (plugin will remind), please note")]),e._v(".")])])])]),e._v(" "),t("p",[e._v("The property "),t("em",[e._v("common")]),e._v(" represents the HDL function library that comes with the plugin, "),t("em",[e._v("the code of this library is less mature and is for reference only")]),e._v(".\nThe lib paths that have been simulated and tested so far are as follows")]),e._v(" "),t("ul",[t("li",[e._v("Soc")]),e._v(" "),t("li",[e._v("Math/Cordic.v")]),e._v(" "),t("li",[e._v("Math/Sort3.v")]),e._v(" "),t("li",[e._v("Math/Sqrt.v")]),e._v(" "),t("li",[e._v("Malloc/RAM/Shift_RAM")]),e._v(" "),t("li",[e._v("Apply/DSP/Advance/Communicate/Modulate")]),e._v(" "),t("li",[e._v("Apply/DSP/Base/DDS")]),e._v(" "),t("li",[e._v("Apply/Image  (need to include Sort3, Sqrt, Shift_RAM)")])]),e._v(" "),t("p",[t("code",[e._v("[Note]")]),e._v(": When the input is a folder then it contains all the files under that folder. In addition, it is not recommended to change the code in this library directly, otherwise it will be overwritten again after the next plugin update, please be careful.")]),e._v(" "),t("p",[e._v("The property "),t("em",[e._v("custom")]),e._v(" represents a user-defined HDL function library.\nThe use of this property requires the root directory of the user-defined library to be configured for "),t("em",[e._v("prj.lib.custom.path")]),e._v(" under "),t("em",[e._v("setting")]),e._v(", and the absolute path of the file (folder) with the configuration under the "),t("em",[e._v("custom")]),e._v(" property. The representation is as follows:\n"),t("em",[t("code",[e._v("prj.lib.custom.path")])]),t("code",[e._v("/")]),t("em",[t("code",[e._v("${custom}")])])]),e._v(" "),t("p",[t("code",[e._v("[Note]")]),e._v(": When the input is a folder then it contains all the files under that folder.")]),e._v(" "),t("p",[e._v("Finally, for the "),t("code",[e._v("IP_REPO")]),e._v(" property, this is the two official xilinx IP repo provided by the plugin to users, choose the one you want to configure, and the plugin will automatically add it to the IP repo of Vivado, which is convenient for users to develop directly without having to compile and import it by themselves.")])])}),[],!1,null,null,null);t.default=n.exports}}]);